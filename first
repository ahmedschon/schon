// Written by: Ahmed rahmou
// This code is for controlling servo motor with IR remote control
// When clicking at any of two buttons the motor is toggling between the rotation and stop

#include <IRremote.h>     //must copy IRremote library to arduino libraries
#include <Servo.h>
#define plus 0xA3C8EDDB   //clockwise rotation button
#define minus 0xF076C13B  //counter clockwise rotation button

int RECV_PIN = 2;       //IR receiver pin
Servo servo;
int val;                //rotation angle
bool cwRotation, ccwRotation;  //the states of rotation

IRrecv irrecv(RECV_PIN);

decode_results results;

void setup()
{
  Serial.begin(9600);
  irrecv.enableIRIn(); // Start the receiver
  servo.attach(9);     //servo pin
}

void loop() 
{
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX);
    irrecv.resume(); // Receive the next value

    if (results.value == plus)
    {
      cwRotation = !cwRotation;      //toggle the rotation value
      ccwRotation = false;         //no rotation in this direction
    }

    if (results.value == minus)
    {
      ccwRotation = !ccwRotation;   //toggle the rotation value
      cwRotation = false;            //no rotation in this direction
    }
  }
  if (cwRotation && (val != 175))  {
    val++;                         //for colockwise button
  }
  if (ccwRotation && (val != 0))  {
    val--;                         //for counter colockwise button
  }
  servo.write(val);
  delay(20);          //General speed
}

int bd;
int led =13;
void setup() {
// put your setup code here, to run once:
Serial.begin(9600);
Serial.println("On 1 Off 2");
pinMode(led,OUTPUT);
}
void loop() {
// put your main code here, to run repeatedly:
if (Serial.available())
{
bd=Serial.read();
Serial.println(bd);
if(bd=='0')
{
digitalWrite(led,HIGH);
Serial.print("high");
}
{
if (bd=='1')
{
digitalWrite(led,LOW);
Serial.print("low");
}
}
delay(100);
}
}
static int oldB = LOW;
int result = 0;
int newA = digitalRead(aPin);
int newB = digitalRead(bPin);
if (newA != oldA || newB != oldB)
{
// something has changed
if (oldA == LOW && newA == HIGH)
{
result = -(oldB * 2 - 1);
}
}
oldA = newA;
oldB = newB;
return result;
}
int setState()
{
if (state == 0)
{
setLights(HIGH, LOW, LOW);
targetCount = longPeriod;
state = 1;
}
else if (state == 1)
{
setLights(HIGH, HIGH, LOW);
targetCount = shortPeriod;
state = 2;
}
else if (state == 2)
{
setLights(LOW, LOW, HIGH);
targetCount = longPeriod;
state = 3;
}
else if (state == 3)
{
setLights(LOW, HIGH, LOW);
targetCount = shortPeriod;
state = 0;
}
}
void setLights(int red, int yellow, int green)
{
digitalWrite(redPin, red);
digitalWrite(yellowPin, yellow);
digitalWrite(greenPin, green);
int ledPin = 13;
int sensorPin = 0;
double alpha = 0.75;
int period = 20;
double change = 0.0;
void setup()
{
pinMode(ledPin, OUTPUT);
Serial.begin(115200);
}
void loop()
{
static double oldValue = 0;
static double oldChange = 0;
int rawValue =
analogRead(sensorPin);
double value = alpha * oldValue
+ (1 - alpha) * rawValue;
Serial.print(rawValue);
Serial.print(“,”);
Serial.println(value);
oldValue = value;
delay(period);
}
int ledPin = 13;
int sensorPin = 0;
double alpha = 0.75;
int period = 20;
double change = 0.0;
void setup()
{
pinMode(ledPin, OUTPUT);
}
void loop()
{
static double oldValue = 0;
static double oldChange = 0;
int rawValue =
analogRead(sensorPin);
double value = alpha * oldValue
+ (1 - alpha) * rawValue;
change = value - oldValue;
digitalWrite(ledPin, (change <
0.0 && oldChange > 0.0));
oldValue = value;
oldChange = change;
delay(period);
}
#include <EEPROM.h>
#define ledPin 13
#define analogPin 0
#define maxReadings 255
#define beta 4090 // from your thermistor's datasheet
#define resistance 33
float readings[maxReadings];
int lastReading = EEPROM.read(0);
boolean loggingOn = false;
long period = 300;
long count = 0;
char mode = 'C';
void setup()
{
pinMode(ledPin, OUTPUT);
Serial.begin(9600);
Serial.println("Ready");
}
void loop()
{
if (Serial.available())
{
char ch = Serial.read();
if (ch == 'r' || ch == 'R')
{
sendBackdata();
}
else if (ch == 'x' || ch == 'X')
{
lastReading = 0;
EEPROM.write(0, 0);
Serial.println("Data cleared");
}
else if (ch == 'g' || ch == 'G')
{
loggingOn = true;
Serial.println("Logging started");
}
else if (ch > '0' && ch <= '9')
{
setPeriod(ch);
}
else if (ch == 'c' or ch == 'C')
{
Serial.println("Mode set to deg C");
mode = 'C';
}
else if (ch == 'f' or ch == 'F')
{
Serial.println("Mode set to deg F");
mode = 'F';
}
else if (ch == '?')
{
reportStatus();
}
}
if (loggingOn && count > period)
{
logReading();
count = 0;
}
count++;
delay(1000);
}
void sendBackdata()
{
loggingOn = false;
Serial.println("Logging stopped");
Serial.println("------ cut here ---------");
Serial.print("Time (min)\tTemp (");
Serial.print(mode);
Serial.println(")");
for (int i = 0; i < lastReading; i++)
{
Serial.print((period * i) / 60);
Serial.print("\t");
float temp = getReading(i);
if (mode == 'F')
{
temp = (temp * 9) / 5 + 32;
}
Serial.println(temp);
}
Serial.println("------ cut here ---------");
}
void setPeriod(char ch)
{
int periodMins = ch - '0';
Serial.print("Sample period set to: ");
Serial.print(periodMins);
Serial.println(" mins");
period = periodMins * 60;
}
void logReading()
{
if (lastReading < maxReadings)
{
long a = analogRead(analogPin);
float temp = beta / (log(((1025.0 * resistance / a) - 33.0) / 33.0) +
(beta / 298.0)) - 273.0;
storeReading(temp, lastReading);
lastReading++;
}
else
{
Serial.println("Full! logging stopped");
loggingOn = false;
}
}
void storeReading(float reading, int index)
{
EEPROM.write(0, (byte)index); // store the number of samples in byte 0
byte compressedReading = (byte)((reading + 20.0) * 4);
EEPROM.write(index + 1, compressedReading);
}
float getReading(int index)
{
lastReading = EEPROM.read(0);
byte compressedReading = EEPROM.read(index + 1);
float uncompressesReading = (compressedReading / 4.0) - 20.0;
return uncompressesReading;
}
void reportStatus()
{
Serial.println("----------------");
Serial.println("Status");
Serial.print("Sample period\t");
Serial.println(period / 60);
Serial.print("Num readings\t");
Serial.println(lastReading);
Serial.print("Mode degrees\t");
Serial.println(mode);
Serial.println("----------------");
}
int redPin = 9;
int greenPin = 10;
int bluePin = 11;
int aPin = 6;
int bPin = 7;
int buttonPin = 5;
boolean isOn = true;
int color = 0;
long colors[48]= {
0xFF2000, 0xFF4000, 0xFF6000, 0xFF8000, 0xFFA000, 0xFFC000, 0xFFE000, 0xFFFF00,
0xE0FF00, 0xC0FF00, 0xA0FF00, 0x80FF00, 0x60FF00, 0x40FF00, 0x20FF00, 0x00FF00,
0x00FF20, 0x00FF40, 0x00FF60, 0x00FF80, 0x00FFA0, 0x00FFC0, 0x00FFE0, 0x00FFFF,
0x00E0FF, 0x00C0FF, 0x00A0FF, 0x0080FF, 0x0060FF, 0x0040FF, 0x0020FF, 0x0000FF,
0x2000FF, 0x4000FF, 0x6000FF, 0x8000FF, 0xA000FF, 0xC000FF, 0xE000FF, 0xFF00FF,
0xFF00E0, 0xFF00C0, 0xFF00A0, 0xFF0080, 0xFF0060, 0xFF0040, 0xFF0020, 0xFF0000
};
void setup()
{
pinMode(aPin, INPUT);
pinMode(bPin, INPUT);
pinMode(buttonPin, INPUT);
pinMode(redPin, OUTPUT);
pinMode(greenPin, OUTPUT);
pinMode(bluePin, OUTPUT);
}
void loop()
{
if (digitalRead(buttonPin))
{
isOn = ! isOn;
delay(200); // de-bounce
}
if (isOn)
{
int change = getEncoderTurn();
color = color + change;
if (color < 0)
{
color = 47;
}
else if (color > 47)
{
color = 0;
}
setColor(colors[color]);
}
else
{
setColor(0);
}
delay(1);
}
int getEncoderTurn()
{
// return -1, 0, or +1
static int oldA = LOW;
static int oldB = LOW;
int result = 0;
int newA = digitalRead(aPin);
int newB = digitalRead(bPin);
if (newA != oldA || newB != oldB)
}

